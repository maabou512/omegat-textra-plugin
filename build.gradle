apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'distribution'
apply plugin: 'idea'

version = '0.5'

configurations {
    provided
}

sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.bootstrapClasspath = files("$JDK_HOME/jre/lib/rt.jar")
}

sourceSets {
    main {
        compileClasspath += configurations.provided
        test.compileClasspath += configurations.provided
        test.runtimeClasspath += configurations.provided
    }
}

repositories {
    maven {
        url "https://dl.bintray.com/omegat-org/maven/"
    }
    jcenter()
}

dependencies {
    compile 'oauth.signpost:signpost-core:1.2.1.2'
    compile 'oauth.signpost:signpost-commonshttp4:1.2.1.2'
    compile 'org.apache.httpcomponents:httpclient:4.5'
    compile 'org.json:json:20160810'
    compile fileTree(dir: 'lib', include: '*.jar')
    compile 'org.slf4j:slf4j-api:1.7.21'
    provided 'org.omegat:omegat:4.0.1'
    provided 'commons-io:commons-io:2.4'
    provided 'commons-lang:commons-lang:2.6'
    testCompile 'org.testng:testng:6.9.10'
}
test.useTestNG()

jar {
    from(sourceSets.main.output) {
        include '**/*.class'
    }
    from {configurations.compile.collect {zipTree(it)}} {
        exclude "META-INF/MANIFEST.MF"
    }
    manifest {
        attributes("OmegaT-Plugins": "tokyo.northside.omegat.textra.OmegatTextraMachineTranslation")
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

checkstyle {
    config = resources.text.fromFile("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = true
    toolVersion = '7.1'
}
// Exclude generated source.
checkstyleMain.exclude '**/dialog/TextraOptionDialog.java'

// Force prevent checkstyle/findbugs on Test.
task checkstyleTest(overwrite: true) {
    doLast{}
}
task findbugsTest(overwrite: true) {
    doLast{}
}

findbugs {
    ignoreFailures = true
}

jacocoTestReport {
    group 'Documentation'
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco/testReport")
    }
}
check.finalizedBy jacocoTestReport

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    classpath += configurations.provided
    options.locale = 'en_US'
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

distTar {
  compression = Compression.GZIP
}

distributions {
    main {
        contents {
            from(jar)
            from('README.md', 'CHANGELOG.md', 'COPYING', 'DEVELOP.md')
            from(sourcesJar) {
                into 'source'
            }
            from(javadocJar) {
                into 'docs'
            }
        }
    }
}

