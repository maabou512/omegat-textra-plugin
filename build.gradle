apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'distribution'
apply plugin: 'idea'

version = '0.4'

configurations {
    provided
}

sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.bootClasspath = "$JDK_HOME/jre/lib/rt.jar"

sourceSets {
    main {
        compileClasspath += configurations.provided
        test.compileClasspath += configurations.provided
        test.runtimeClasspath += configurations.provided
    }
}

repositories {
    maven {
        url "https://dl.bintray.com/omegat-org/maven/"
    }
    jcenter()
}

dependencies {
    compile 'oauth.signpost:signpost-core:1.2.1.2'
    compile 'oauth.signpost:signpost-commonshttp4:1.2.1.2'
    compile 'org.apache.httpcomponents:httpclient:4.5'
    compile 'org.json:json:20160810'
    compile fileTree(dir: 'lib', include: '*.jar')
    compile 'org.slf4j:slf4j-api:1.7.21'
    provided 'org.omegat:omegat:4.0.1'
    provided 'commons-io:commons-io:2.4'
    provided 'commons-lang:commons-lang:2.6'
    testCompile 'org.testng:testng:6.9.10'
}
test.useTestNG()

jar {
    from files(sourceSets.main.output.classesDir)
    from {configurations.compile.collect {zipTree(it)}} {
        exclude "META-INF/MANIFEST.MF"
    }
    manifest {
        attributes("OmegaT-Plugins": "tokyo.northside.omegat.textra.OmegatTextraMachineTranslation")
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

checkstyle {
    config = resources.text.fromFile("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = true
    toolVersion = '7.1'
}
// Exclude generated source.
checkstyleMain.exclude '**/dialog/TextraOptionDialog.java'

// Force prevent checkstyle/findbugs on Test.
task checkstyleTest(overwrite: true) << {}
task findbugsTest(overwrite: true) << {}

findbugs {
    ignoreFailures = true
}

jacocoTestReport {
    group 'Documentation'
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/reports/jacoco/testReport"
    }
}

task jacocoIntegrationTestReport(type: JacocoReport) {
    group 'Documentation'
    sourceSets sourceSets.main
}

check.finalizedBy jacocoTestReport

task jacocoCombinedTestReport(type: JacocoReport) {
    group 'Documentation'
    sourceSets sourceSets.main
    reports.html.destination "${buildDir}/reports/jacoco/combinedTestReport"
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

javadoc {
    classpath += configurations.provided
    options.locale = 'en_US'
}

artifacts {
    archives jar
    archives sourceJar
}

distTar {
  compression = Compression.GZIP
}

distributions {
    main {
        contents {
            from('README.md', 'CHANGELOG.md', 'COPYING', 'DEVELOP.md')
            from(sourceJar) {
                into 'source'
            }
            from(jar) {
                into 'plugin'
            }
        }
    }
}

